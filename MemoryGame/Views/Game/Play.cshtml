@using System.Linq
@using System.Collections.Generic
@using MemoryGame.Models
@model List<MemoryGame.Models.Tile>

@{
    ViewData["Title"] = "Play";

    int gameId = (int)ViewBag.GameId;
    int? sel1 = ViewBag.Sel1 as int?;

    bool gameCompleted = ViewBag.GameCompleted is bool gcFlag && gcFlag;
    bool isMyTurn = ViewBag.IsMyTurn is bool myTurnFlag && myTurnFlag;

    int totalTiles = ViewBag.TotalTiles is int tt ? tt : Model.Count;
    int matchedTiles = ViewBag.MatchedTiles is int mt ? mt : Model.Count(t => t.IsMatched);
    int remainingPairs = ViewBag.RemainingPairs is int rp ? rp : (totalTiles - matchedTiles) / 2;

    int lastTurn = ViewBag.LastTurn is int lt ? lt : 0;
    string statusText = (ViewBag.Status as string) ?? "Waiting";

    var players = ViewBag.Players as List<PlayerVm> ?? new List<PlayerVm>();
    var scores = ViewBag.Scores as IDictionary<int, int> ?? new Dictionary<int, int>();
    var history = ViewBag.History as List<MoveVm> ?? new List<MoveVm>();
    int? me = ViewBag.MeUserId as int?;
    int? currentTurnUserId = ViewBag.CurrentTurnUserId as int?;

    var lastA = -1; var lastB = -1; var lastMatch = false;
    if (TempData["LastPair"] is string lp)
    {
        var parts = lp.Split(',');
        if (parts.Length == 3)
        {
            int.TryParse(parts[0], out lastA);
            int.TryParse(parts[1], out lastB);
            lastMatch = parts[2] == "1";
        }
    }

    bool showNotYourTurn = !isMyTurn && !gameCompleted;
}

<h2 class="mb-3">Game #@gameId</h2>

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger mb-3">@TempData["Error"]</div>
}

<div class="row g-3">
    <!-- Header KPI + actions -->
    <div class="col-12">
        <div class="card border-0 shadow-sm">
            <div class="card-body d-flex flex-wrap gap-3 align-items-center">
                <span class="badge
                    @(statusText == "Completed" ? "bg-success" : statusText == "InProgress" ? "bg-primary" : "bg-secondary")">
                    @statusText
                </span>

                <div class="vr"></div>

                <div>
                    <strong>Matched:</strong> @matchedTiles / @totalTiles
                    <span class="text-muted">(&nbsp;@remainingPairs remaining pairs&nbsp;)</span>
                </div>

                <div class="vr d-none d-md-block"></div>

                <div class="ms-auto d-flex gap-2">
                    @if (!gameCompleted)
                    {
                        if (currentTurnUserId.HasValue)
                        {
                            var current = players.FirstOrDefault(p => p.UserID == currentTurnUserId.Value);
                            <span class="fw-semibold align-self-center">Turn:</span>
                            <span class="align-self-center @(isMyTurn ? "text-primary fw-bold" : "text-body")">
                                @(current?.Username ?? "Player") @(isMyTurn ? "(You)" : "")
                            </span>
                        }
                        else
                        {
                            <span class="text-muted">Waiting for players…</span>
                        }
                    }
                    else
                    {
                        <span class="fw-semibold text-success align-self-center">Winner:</span>
                        <span class="fw-bold align-self-center">@((ViewBag.WinnerName as string) ?? "Tie")</span>

                        <!-- Play Again -->
                        <form asp-action="Create" method="post" class="m-0">
                            @Html.AntiForgeryToken()
                            <button class="btn btn-success btn-sm">Start New Game</button>
                        </form>
                        <!-- Rematch removed -->
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Players card -->
    <div class="col-12 col-lg-4">
        <div class="card border-0 shadow-sm h-100">
            <div class="card-header bg-light">
                <strong>Players</strong>
            </div>
            <div class="card-body p-0">
                <table class="table table-sm mb-0 align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Player</th>
                            <th class="text-center">Score</th>
                            <th class="text-center">Turn</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in players)
                        {
                            var score = scores.ContainsKey(p.UserID) ? scores[p.UserID] : 0;
                            bool turn = currentTurnUserId.HasValue && currentTurnUserId.Value == p.UserID && !gameCompleted;
                            <tr>
                                <td>
                                    @p.Username
                                    @if (me.HasValue && me.Value == p.UserID)
                                    {
                                        <span class="text-muted"> (You)</span>
                                    }
                                </td>

                                <td class="text-center"><span class="badge bg-dark-subtle text-dark">@score</span></td>
                                <td class="text-center">@((turn) ? "▶" : "")</td>
                            </tr>
                        }
                        @if (!players.Any())
                        {
                            <tr><td colspan="3" class="text-muted text-center py-3">No players yet.</td></tr>
                        }
                    </tbody>
                </table>
            </div>
            @if (showNotYourTurn)
            {
                <div class="card-footer bg-warning-subtle text-warning-emphasis">
                    It’s not your turn. The page will auto-update when it’s your turn.
                </div>
            }
        </div>
    </div>

    <!-- Board card -->
    <div class="col-12 col-lg-8">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-light d-flex justify-content-between align-items-center">
                <strong>Board</strong>
                <a asp-action="Lobby" class="btn btn-sm btn-outline-secondary">Back to Lobby</a>
            </div>
            <div class="card-body">

                <style>
                    .board-grid {
                        display: grid;
                        grid-template-columns: repeat(4, minmax(80px, 1fr));
                        gap: 12px;
                        justify-items: center;
                    }

                    .flip {
                        perspective: 900px;
                        width: 100px;
                        height: 120px;
                    }

                    .flip-inner {
                        position: relative;
                        width: 100%;
                        height: 100%;
                        transition: transform 0.35s ease;
                        transform-style: preserve-3d;
                    }

                    .flipped .flip-inner {
                        transform: rotateY(180deg);
                    }

                    .face {
                        position: absolute;
                        width: 100%;
                        height: 100%;
                        backface-visibility: hidden;
                        border-radius: .5rem;
                        border: 1px solid #dcdcdc;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-weight: 600;
                        user-select: none;
                    }

                        .face.front {
                            background: #0d6efd;
                            color: #fff;
                        }

                        .face.back {
                            background: #ffffff;
                            transform: rotateY(180deg);
                        }

                    .tile-matched .face.back {
                        background: #d4edda;
                        border-color: #b7dfb9;
                    }

                    .tile-selected .face.back {
                        outline: 3px solid #0d6efd;
                        outline-offset: 2px;
                    }

                    .tile-revealed .face.back {
                        background: #f8f9fa;
                    }

                    .tile-btn {
                        width: 100%;
                        height: 100%;
                        border: none;
                        background: transparent;
                        color: inherit;
                        font: inherit;
                        cursor: pointer;
                    }

                        .tile-btn:disabled {
                            opacity: .55;
                            cursor: not-allowed;
                        }
                </style>

                <div class="board-grid"
                     data-game-id="@gameId"
                     data-me="@me"
                     data-turn="@currentTurnUserId"
                     data-last="@lastTurn"
                     data-status="@ViewBag.Status">
                    @foreach (var t in Model)
                    {
                        bool isSelected = sel1.HasValue && sel1.Value == t.TileID;
                        bool isLastPicked = (t.TileID == lastA || t.TileID == lastB);
                        bool showFace = t.IsMatched || isSelected || isLastPicked;

                        var outerClasses = "flip";
                        var stateClass = "";
                        if (t.IsMatched) stateClass += " tile-matched";
                        else if (isSelected) stateClass += " tile-selected";
                        else if (isLastPicked) stateClass += " tile-revealed";

                        <div class="@(outerClasses) @(stateClass) @(showFace ? "flipped" : "")">
                            <div class="flip-inner">
                                <div class="face front">
                                    @if (!gameCompleted && isMyTurn)
                                    {
                                        <form asp-action="Flip" method="post" class="w-100 h-100 m-0">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="id" value="@gameId" />
                                            <input type="hidden" name="tileId" value="@t.TileID" />
                                            <button type="submit" class="tile-btn">?</button>
                                        </form>
                                    }
                                    else
                                    {
                                        <button type="button" class="tile-btn" disabled>?</button>
                                    }
                                </div>
                                <div class="face back">@t.CardName</div>
                            </div>
                        </div>
                    }
                </div>

            </div>
        </div>
    </div>

    <!-- Moves History card -->
    <div class="col-12">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-light">
                <strong>Moves History</strong>
            </div>
            <div class="card-body p-0">
                <table class="table table-striped table-sm mb-0">
                    <thead class="table-light">
                        <tr>
                            <th style="width:90px;">Turn</th>
                            <th>Player</th>
                            <th style="width:120px;">Match?</th>
                            <th class="d-none d-md-table-cell" style="width:220px;">Time</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (history.Any())
                        {
                            @foreach (var m in history)
                            {
                                <tr>
                                    <td>#@m.TurnNumber</td>
                                    <td>@m.Username</td>
                                    <td>@(m.IsMatch ? "✅" : "❌")</td>
                                    <td class="d-none d-md-table-cell">@m.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr><td colspan="4" class="text-muted text-center py-3">No moves yet.</td></tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        (function(){
            const grid = document.querySelector('.board-grid');
            if (!grid) return;

            const gameId = grid.dataset.gameId;
            const me = parseInt(grid.dataset.me || '-1', 10);
            let lastTurn = parseInt(grid.dataset.last || '0', 10);
            let lastStatus = (grid.dataset.status || '').toString();
            const pollMs = 2000;

            async function poll() {
                try {
                    const res = await fetch('@Url.Action("State", "Game")' + '?id=' + encodeURIComponent(gameId), {
                        method: 'GET',
                        cache: 'no-store'
                    });
                    if (!res.ok) return;
                    const data = await res.json();
                    if (!data.ok) return;

                    const statusChanged = data.status !== lastStatus;
                    const newMove = (data.lastTurn || 0) > lastTurn;
                    const itsMyTurn = (data.currentTurnUserId === me);

                    if (statusChanged || newMove || itsMyTurn) {
                        window.location.reload();
                        return;
                    }
                } catch (e) { }
            }

            const isMyTurn = '@(isMyTurn ? "true" : "false")' === 'true';
            const gameCompleted = '@(gameCompleted ? "true" : "false")' === 'true';
            if (!isMyTurn && !gameCompleted) {
                setInterval(poll, pollMs);
            }
        })();
    </script>
}
