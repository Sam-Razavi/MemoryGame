@model List<MemoryGame.Models.Tile>
@{
    ViewData["Title"] = "Play";
    int gameId = (int)ViewBag.GameId;
    int? sel1 = ViewBag.Sel1 as int?;

    // Parse the last pair from TempData if present: "tileId1,tileId2,isMatch(0/1)"
    var lastA = -1; var lastB = -1; var lastMatch = false;
    if (TempData["LastPair"] is string lp)
    {
        var parts = lp.Split(',');
        if (parts.Length == 3)
        {
            int.TryParse(parts[0], out lastA);
            int.TryParse(parts[1], out lastB);
            lastMatch = parts[2] == "1";
        }
    }

    int totalTiles = ViewBag.TotalTiles is int tt ? tt : Model.Count;
    int matchedTiles = ViewBag.MatchedTiles is int mt ? mt : Model.Count(t => t.IsMatched);
    int remainingPairs = (totalTiles - matchedTiles) / 2;
}

<h2>Game #@gameId</h2>
@if (TempData["Error"] != null)
{
    <div class="alert alert-danger">@TempData["Error"]</div>
}

<p>
    <strong>Matched tiles:</strong> @matchedTiles / @totalTiles
    &nbsp; | &nbsp;
    <strong>Remaining pairs:</strong> @remainingPairs
</p>

<style>
    .grid {
        display: grid;
        grid-template-columns: repeat(4, 100px);
        gap: 10px;
    }

    .tile {
        width: 100px;
        height: 100px;
        border: 1px solid #ccc;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .matched {
        background: #d4edda;
    }
    /* green for matched */
    .selected {
        outline: 3px solid #0d6efd;
    }

    .revealed {
        background: #f8f9fa;
    }
    /* temporary reveal for non-matched */
    button.tile-btn {
        width: 100%;
        height: 100%;
        border: none;
        background: none;
    }
</style>

<div class="grid">
    @foreach (var t in Model)
    {
        // Should this tile be shown face-up?
        bool isSelected = sel1.HasValue && sel1.Value == t.TileID;
        bool isLastPicked = (t.TileID == lastA || t.TileID == lastB);
        bool showFace = t.IsMatched || isSelected || isLastPicked;

        var classes = "tile";
        if (t.IsMatched) classes += " matched";
        else if (isSelected || isLastPicked) classes += " revealed";
        if (isSelected) classes += " selected";

        <div class="@classes">
            @if (showFace)
            {
                <span>@t.CardName</span>
            }
            else
            {
                <form asp-action="Flip" method="post" style="margin:0">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="id" value="@gameId" />
                    <input type="hidden" name="tileId" value="@t.TileID" />
                    <button type="submit" class="tile-btn">?</button>
                </form>
            }
        </div>
    }
</div>

<div class="mt-3">
    <a asp-action="Lobby" class="btn btn-secondary">Back to Lobby</a>
</div>
